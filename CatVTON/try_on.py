# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tW_unKtA1HmAZo5t-GWuCYJdREmYtwDW
"""

import os
import sys
sys.path.append("E:/CodeAllNight/CETA/CETA/CatVTON")
from PIL import Image
from model.cloth_masker import AutoMasker
from model.pipeline import CatVTONPipeline
from utils import init_weight_dtype, resize_and_crop, resize_and_padding
import torch
import numpy as np
from diffusers.image_processor import VaeImageProcessor

def process_single_image(image_path, cloth_type):
    """
    生成单张图片的mask
    :param image_path: 输入图片的路径
    :param cloth_type: 衣物类型 （upper, lower, overall）
    :return: 生成的mask图像
    """
    # 初始化AutoMasker
    automasker = AutoMasker(
        densepose_ckpt="E:\CodeAllNight\CETA\CETA\model\CatVTON\DensePose",  # 指向 DensePose 配置文件
        schp_ckpt="E:\CodeAllNight\CETA\CETA\model\CatVTON\SCHP",  # 指向 SCHP 权重文件
        device='cuda'  # 如果没有 GPU 则使用 'cpu'
    )

    # 生成mask
    mask = automasker(image_path, cloth_type)['mask']
    return mask

def tryon_process(image_path, cloth_image_path, output_dir, cloth_type='upper'):
    """
    主函数，用于生成mask并进行虚拟试穿
    :param image_path: 模特图片路径
    :param cloth_image_path: 服装图片路径
    :param output_dir: 生成的mask和结果保存目录
    :param cloth_type: 衣物类型，默认为 'upper'（可选：'upper', 'lower', 'overall'）
    """
    # 检查输入图片是否存在
    assert os.path.exists(image_path), f"Image {image_path} does not exist."
    assert os.path.exists(cloth_image_path), f"Cloth image {cloth_image_path} does not exist."

    # 检查输出目录是否存在，不存在则创建
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # 加载图片
    person_image = Image.open(image_path).convert("RGB")
    cloth_image = Image.open(cloth_image_path).convert("RGB")

    # 调整图片尺寸
    person_image = resize_and_crop(person_image, (768, 1024))  # 设置固定尺寸
    cloth_image = resize_and_padding(cloth_image, (768, 1024))

    # Step 1: 生成 mask
    print(f"Generating mask for {image_path}...")
    mask = process_single_image(person_image, cloth_type)

    # 保存 mask
    mask_output_path = os.path.join(output_dir, os.path.basename(image_path).replace('.png', '_mask.png'))
    mask.save(mask_output_path)
    print(f"Mask saved at: {mask_output_path}")

    # Step 2: 进行试穿
    print(f"Starting virtual try-on for {image_path} with {cloth_image_path}...")

    # 调整 mask 尺寸
    mask_processor = VaeImageProcessor(vae_scale_factor=8, do_normalize=False, do_binarize=True, do_convert_grayscale=True)
    # mask = resize_and_crop(mask, (768, 1024))
    # mask = np.array(mask)
    # mask[mask > 0] = 255
    # mask = Image.fromarray(mask)
    mask = mask_processor.blur(mask, blur_factor=9)

    # 初始化 Pipeline
    pipeline = CatVTONPipeline(
        base_ckpt="..\model\stable-diffusion-inpainting",
        attn_ckpt="..\model\CatVTON",
        attn_ckpt_version="mix",
        weight_dtype=init_weight_dtype("bf16"),
        skip_safety_check=True,
        use_tf32=True,
        device='cuda'
    )


    # 进行推理
    generator = torch.Generator(device='cuda').manual_seed(1024)
    result_image = pipeline(
        image=person_image,
        condition_image=cloth_image,
        mask=mask,
        num_inference_steps=85,
        guidance_scale=7.5,
        generator=generator
    )[0]

    # 保存结果
    result_output_path = os.path.join(output_dir, "result.png")
    result_image.save(result_output_path)
    print(f"Result saved at: {result_output_path}")

# if __name__ == "__main__":
#     # 示例用法
#     image_path = "resource\demo\example\person\men\model_5.png"  # 模特图片的路径
#     cloth_image_path = "resource\demo\example\condition\overall\qwe21744571_51588794_1000.jpg"  # 服装图片的路径
#     output_dir = "output"  # 生成的mask和试穿结果的保存路径
#     cloth_type = "overall"  # 衣物类型，可以是 'upper', 'lower', 'overall'

#     # 调用 tryon_process 函数
#     tryon_process(image_path, cloth_image_path, output_dir, cloth_type)